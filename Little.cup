/**********************************************************************
 Java CUP specification for a parser for Little programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* Redefine method syntax_error to give better error messages than just
 * "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

:};


/* Terminals (tokens returned by the scanner) */
terminal 	        INT;
terminal 	        VOID;
terminal 	        DBL;
terminal 	        IF;
terminal 	        ELSE;
terminal 	        WHILE;
terminal 	        RETURN;
terminal 	        SCANF;
terminal 	        PRINTF;
terminal 	        INT_FORMAT;
terminal 	        DBL_FORMAT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal DblLitTokenVal DBLLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal 	        LCURLY;
terminal 	        RCURLY;
terminal 	        LPAREN;
terminal 	        RPAREN;
terminal 	        COMMA;
terminal 	        ASSIGN;
terminal 	        SEMICOLON;
terminal 	        PLUS;
terminal 	        MINUS;
terminal 	        STAR;
terminal 	        DIVIDE;
terminal 	        PLUSPLUS;
terminal 	        MINUSMINUS;
terminal 	        NOT;
terminal 	        AND;
terminal 	        OR;
terminal 	        EQUALS;
terminal 	        NOTEQUALS;
terminal 	        LESS;
terminal 	        GREATER;
terminal 	        LESSEQ;
terminal 	        GREATEREQ;
terminal 	        AMPERSAND;

/* Non-terminals */
non terminal ProgramNode      program;
non terminal LinkedList	      declList;
non terminal LinkedList       varDeclList;
non terminal DeclNode	      decl;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode	      fnDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList	      formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList	      stmtList;
non terminal StmtNode         stmt;
non terminal ExpNode	      exp;
non terminal AssignNode	      assign_exp;
non terminal ExpNode	      term;
non terminal CallExpNode      fncall;
non terminal LinkedList	      actualList;
non terminal TypeNode	      type;
non terminal IdNode	      id;

/* precedences and associativities of operators */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left STAR, DIVIDE;
precedence nonassoc NOT, PLUSPLUS, MINUSMINUS;

start with program;

/* grammar with actions */
program		::= declList: d
		{: RESULT = new ProgramNode(new DeclListNode(d));
		:}
		;

declList 	::= declList:dl decl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<DeclNode>();
		:}
		;

decl		::= varDecl:v
		{: RESULT = v;
		:}
		| fnDecl:f
		{: RESULT = f;
		:}
		;

varDeclList 	::= varDeclList:dl varDecl:d
		{: dl.addLast(d);
		   RESULT = dl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<VarDeclNode>();
		:}
		;

varDecl		::= type: t id: i SEMICOLON
		{: RESULT = new VarDeclNode(t, i);
		:}
		;


fnDecl		::= type:t id:i formals:f fnBody:b
		{: RESULT = new FnDeclNode(t, i, f, b);
		:}
		;

formals		::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		:}
		| LPAREN formalsList:f RPAREN
		{: RESULT = new FormalsListNode(f);
		:}
		;

formalsList	::= formalDecl:v
		{: LinkedList<FormalDeclNode> L = new LinkedList<FormalDeclNode>();
		   L.addLast(v);
		   RESULT = L;
		:}
		| formalDecl:v COMMA formalsList:L
		{: L.addFirst(v);
		   RESULT = L;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

fnBody	::= LCURLY varDeclList:d stmtList:s RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(d),
				           new StmtListNode(s));
		:}
		;

stmtList	::= stmtList:L stmt:s
		{: L.addLast(s);
		   RESULT = L;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
		;

stmt		::= assign_exp:e SEMICOLON
		{: RESULT = new AssignStmtNode(e);
		:}
		| PLUSPLUS id:l SEMICOLON
		{: RESULT = new PreIncStmtNode(l);
		:}
		| MINUSMINUS id:l SEMICOLON
		{: RESULT = new PreDecStmtNode(l);
		:}
		| id:l PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(l);
		:}
		| id:l MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(l);
		:}
		| SCANF LPAREN INT_FORMAT COMMA AMPERSAND id:l RPAREN SEMICOLON
		{: RESULT = new ReadIntStmtNode(l);
		:}
		| SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id:l RPAREN SEMICOLON
		{: RESULT = new ReadDblStmtNode(l);
		:}
		| PRINTF LPAREN INT_FORMAT COMMA exp:e RPAREN SEMICOLON
		{: RESULT = new WriteIntStmtNode(e);
		:}
		| PRINTF LPAREN DBL_FORMAT COMMA exp:e RPAREN SEMICOLON
		{: RESULT = new WriteDblStmtNode(e);
		:}
		| PRINTF LPAREN STRINGLITERAL:s RPAREN SEMICOLON
		{: RESULT = new WriteStrStmtNode(new StringLitNode(s.linenum,
					 		           s.charnum,
							           s.strVal)
					         );
		:}
	        | IF LPAREN exp:e RPAREN LCURLY varDeclList:d stmtList:s RCURLY
		{: RESULT = new IfStmtNode(e,
					   new DeclListNode(d),
					   new StmtListNode(s));
		:}
	        | IF LPAREN exp:e RPAREN LCURLY varDeclList:td stmtList:ts RCURLY ELSE LCURLY varDeclList:ed stmtList:es RCURLY
		{: RESULT = new IfElseStmtNode(e,
					       new DeclListNode(td),
					       new StmtListNode(ts),
					       new DeclListNode(ed),
					       new StmtListNode(es));
		:}
	        | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:d stmtList:l RCURLY
		{: RESULT = new WhileStmtNode(e,
					      new DeclListNode(d),
					      new StmtListNode(l));
		:}
		| RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}
		| RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null);
		:}
		| fncall:f SEMICOLON
		{: RESULT = new CallStmtNode(f);
		:}
		;

fncall	        ::= id:i LPAREN RPAREN   // fn call with no args
		{: RESULT = new CallExpNode(i,
					    new ExpListNode(new LinkedList<ExpNode>()));
		:}
	        | id:i LPAREN actualList:L RPAREN  // with args
		{: RESULT = new CallExpNode(i, new ExpListNode(L));
		:}
		;


exp		::=  assign_exp: e
		{: RESULT = e;
		:}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
	        | exp:e1 MINUS exp:e2
		{: RESULT = new MinusNode(e1, e2);
		:}
	        | exp:e1 STAR exp:e2
		{: RESULT = new TimesNode(e1, e2);
		:}
	        | exp:e1 DIVIDE exp:e2
		{: RESULT = new DivideNode(e1, e2);
		:}
	        | NOT exp:e
		{: RESULT = new NotNode(e);
		:}
	        | exp:e1 AND exp:e2
		{: RESULT = new AndNode(e1, e2);
		:}
	        | exp:e1 OR exp:e2
		{: RESULT = new OrNode(e1, e2);
		:}
		| exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1, e2);
		:}
		| exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1, e2);
		:}
		| exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1, e2);
		:}
		| exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1, e2);
		:}
		| exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1, e2);
		:}
		| exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1, e2);
		:}
		| MINUS term:t
		{: RESULT = new UnaryMinusNode(t);
		:}
		| term: t
		{: RESULT = t;
		:}
		;

assign_exp	::= id:l ASSIGN exp:e
		{: RESULT = new AssignNode(l, e);
		:}
		;

term		::= id:l
		{: RESULT = l;
		:}
		| id:i PLUSPLUS
		{: RESULT = new PlusPlusNode(i);
		:}
		| id:i MINUSMINUS
		{: RESULT = new MinusMinusNode(i);
		:}
	        | INTLITERAL:i
		{: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
		:}
	        | DBLLITERAL:d
		{: RESULT = new DblLitNode(d.linenum, d.charnum, d.dblVal);
		:}
	        | LPAREN exp:e RPAREN
		{: RESULT = e;
		:}
		| fncall:f
		{: RESULT = f;
		:}
	        ;

actualList	::= exp:e
		{: LinkedList<ExpNode> L = new LinkedList<ExpNode>();
		   L.addLast(e);
		   RESULT = L;
		:}
		| actualList:L COMMA exp:e
		{: L.addLast(e);
		   RESULT = L;
	 	:}
		;

type		::= INT
		{: RESULT = new IntNode();
		:}
		| DBL
		{: RESULT = new DblNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
		;

id              ::= ID:i
		{: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		:}
		;
